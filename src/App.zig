const std = @import("std");
const App = @This();

const log = std.log.scoped(.app);

const vaxis = @import("vaxis");
const TextInput = vaxis.widgets.TextInput;

allocator: std.mem.Allocator,
// A flag for if we should quit
should_quit: bool,
/// The tty we are talking to
tty: vaxis.Tty,
/// The vaxis instance
vx: vaxis.Vaxis,
/// A mouse event that we will handle in the draw cycle
mouse: ?vaxis.Mouse,

shell_input: TextInput,

/// Tagged union of all events our application will handle. These can be generated by Vaxis or your
/// own custom events
const Event = union(enum) {
    key_press: vaxis.Key,
    key_release: vaxis.Key,
    mouse: vaxis.Mouse,
    focus_in, // window has gained focus
    focus_out, // window has lost focus
    paste_start, // bracketed paste start
    paste_end, // bracketed paste end
    paste: []const u8, // osc 52 paste, caller must free
    color_report: vaxis.Color.Report, // osc 4, 10, 11, 12 response
    color_scheme: vaxis.Color.Scheme, // light / dark OS theme changes
    winsize: vaxis.Winsize, // the window size has changed. This event is always sent when the loop is started
};

pub fn init(allocator: std.mem.Allocator) !App {
    const vx = try vaxis.init(allocator, .{
        .kitty_keyboard_flags = .{ .report_events = true },
    });
    return .{
        .allocator = allocator,
        .should_quit = false,
        .tty = try vaxis.Tty.init(),
        .vx = vx,
        .mouse = null,
        .shell_input = TextInput.init(allocator, &vx.unicode),
    };
}

pub fn deinit(self: *App) void {
    // Deinit takes an optional allocator. You can choose to pass an allocator to clean up
    // memory, or pass null if your application is shutting down and let the OS clean up the
    // memory
    self.vx.deinit(self.allocator, self.tty.anyWriter());
    self.tty.deinit();
    self.shell_input.deinit();
}

pub fn run(self: *App) !void {
    // Initialize our event loop. This particular loop requires intrusive init
    var loop: vaxis.Loop(Event) = .{
        .tty = &self.tty,
        .vaxis = &self.vx,
    };
    try loop.init();

    // Start the event loop. Events will now be queued
    try loop.start();

    try self.vx.enterAltScreen(self.tty.anyWriter());

    // Query the terminal to detect advanced features, such as kitty keyboard protocol, etc.
    // This will automatically enable the features in the screen you are in, so you will want to
    // call it after entering the alt screen if you are a full screen application. The second
    // arg is a timeout for the terminal to send responses. Typically the response will be very
    // fast, however it could be slow on ssh connections.
    try self.vx.queryTerminal(self.tty.anyWriter(), 1 * std.time.ns_per_s);

    // Enable mouse events
    try self.vx.setMouseMode(self.tty.anyWriter(), true);

    // This is the main event loop. The basic structure is
    // 1. Handle events
    // 2. Draw application
    // 3. Render
    while (!self.should_quit) {
        // pollEvent blocks until we have an event
        loop.pollEvent();
        // tryEvent returns events until the queue is empty
        while (loop.tryEvent()) |event| {
            try self.update(event);
        }
        // Draw our application after handling events
        self.draw();

        // It's best to use a buffered writer for the render method. TTY provides one, but you
        // may use your own. The provided bufferedWriter has a buffer size of 4096
        var buffered = self.tty.bufferedWriter();
        // Render the application to the screen
        try self.vx.render(buffered.writer().any());
        try buffered.flush();
    }
}

/// Update our application state from an event
pub fn update(self: *App, event: Event) !void {
    switch (event) {
        .key_press => |key| {
            // key.matches does some basic matching algorithms. Key matching can be complex in
            // the presence of kitty keyboard encodings, this will generally be a good approach.
            // There are other matching functions available for specific purposes, as well
            log.info("Got key press: {any}", .{key});
            if (key.matches('c', .{ .ctrl = true })) {
                self.should_quit = true;
            } else {
                try self.shell_input.update(.{ .key_press = key });
            }
        },
        .mouse => |mouse| self.mouse = mouse,
        .winsize => |ws| try self.vx.resize(self.allocator, self.tty.anyWriter(), ws),
        else => {},
    }
}

/// Draw our current state
pub fn draw(self: *App) void {
    // Window is a bounded area with a view to the screen. You cannot draw outside of a windows
    // bounds. They are light structures, not intended to be stored.
    const win = self.vx.window();

    // Clearing the window has the effect of setting each cell to it's "default" state. Vaxis
    // applications typically will be immediate mode, and you will redraw your entire
    // application during the draw cycle.
    win.clear();

    const window_mode: enum { compact, relaxed } = if (win.screen.width < 80) .compact else .relaxed;
    _ = window_mode;

    // In addition to clearing our window, we want to clear the mouse shape state since we may
    // be changing that as well
    self.vx.setMouseShape(.default);

    const child = win.child(.{
        .y_off = 1,
        .height = .{
            .limit = 2,
        },
        .border = .{
            .where = .{ .other = .{
                .bottom = true,
                .left = true,
                .right = true,
            } },
        },
    });

    // mouse events are much easier to handle in the draw cycle. Windows have a helper method to
    // determine if the event occurred in the target window. This method returns null if there
    // is no mouse event, or if it occurred outside of the window
    const style: vaxis.Style = if (child.hasMouse(self.mouse)) |_| blk: {
        // We handled the mouse event, so set it to null
        self.mouse = null;
        self.vx.setMouseShape(.pointer);
        break :blk .{ .reverse = true };
    } else .{};
    _ = try child.printSegment(.{ .text = "$", .style = style }, .{});

    const input_child = win.child(.{
        .y_off = 1,
        .x_off = 3,
        .height = .{
            .limit = 2,
        },
        .width = .expand,
    });

    self.shell_input.draw(input_child);
}
